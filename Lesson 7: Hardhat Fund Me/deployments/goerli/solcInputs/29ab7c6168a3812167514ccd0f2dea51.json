{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//Get Funds from Users\n//Withdraw Funds\n//Set Minimum Funding Values in USD\n\n// SPDX-License-Identifier: MIT\n//Pragma\npragma solidity ^0.8.8;\n\n//Imports\nimport \"./PriceConvertor.sol\";\n\n//Error Codes\n\n//Interfaces or Libraries\n\n//Contract\n\n/// @title A contract to receive Funds\n/// @author Tejesh Kumar\n/// @notice Demo\ncontract FundMe {\n\n    //Type Declaractions\n    using PriceConvertor for uint256;\n\n    //State Variables   \n    uint256 public constant minimumUSD = 50 * 1e18;\n\n    address[] public funders; \n    mapping(address => uint256) public addressToAmountFunder;\n\n    address public owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    uint256 public x;\n\n    constructor(address priceFeedAddress){\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    } \n\n    //function to send money\n    function fund() public payable{\n        x = msg.value.getConversionRate(priceFeed);\n        require(msg.value.getConversionRate(priceFeed)>= minimumUSD, \"Didn't Send Enough\");\n        funders.push(msg.sender);\n        addressToAmountFunder[msg.sender] = msg.value;\n    }\n\n    \n\n    function withdraw() public onlyOwner{\n        \n\n        for(uint256 funderIndex = 0; funderIndex <funders.length; funderIndex++){\n            address funder = funders[funderIndex];\n            addressToAmountFunder[funder] = 0;\n\n        }\n\n        funders = new address[] (0);\n\n        //msg.sender -> address\n        //payable(msg.sender) -> payable address\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send Failed\");\n\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");    \n        require(callSuccess, \"Call Failed\");\n\n    }\n\n    function cheaperWithdraw() public onlyOwner{\n        address[] memory funders2 = funders;\n        for(uint256 funderIndex = 0; funderIndex <funders2.length; funderIndex++){\n            address funder = funders2[funderIndex];\n            addressToAmountFunder[funder] = 0;\n        }\n\n        funders = new address[] (0);\n\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");    \n        require(callSuccess, \"Call Failed\");\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Not Owner\");\n        _; // do rest of the code\n    }\n}"
    },
    "contracts/PriceConvertor.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n\nlibrary PriceConvertor{\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\n        //ABI\n        //Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n\n        (,int256 price,,,) = priceFeed.latestRoundData(); // Price of ETH in term of USD;\n        return uint256(price);\n    }\n        \n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmounInUSD = (ethPrice*ethAmount) / 1e8;\n        return ethAmounInUSD;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}