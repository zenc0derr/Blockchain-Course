const ethers = require("ethers");
const fs = require("fs-extra");

async function main() {
	//http://127.0.0.1:8545

	//helps to connect to the blockchain
	const provider = new ethers.providers.JsonRpcProvider(
		"http://127.0.0.1:8545"
	);

	//connect to or define our wallet
	//pasting our private key directly into our code is veryyyyyyy bad
	const wallet = new ethers.Wallet(
		"813d1a1f6c69677bb232e8ad8dd5d1ecec0ca47b3d3242305e7bfc9745b997b6",
		provider
	);

	//getting abi and binary
	//sync because we need to wait for the file to loaded completely
	const abi = fs.readFileSync(
		"./Simple_Storage_sol_SimpleStorage.abi",
		"utf8"
	);
	const binary = fs.readFileSync(
		"./Simple_Storage_sol_SimpleStorage.bin",
		"utf8"
	);

	// deploying the contract
	const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
	console.log("Deploying please wait");
	//await becasuse we should wait till the contract is deployed
	const contract = await contractFactory.deploy();
	const transactionReceipt = await contract.deployTransaction.wait(1);

	// console.log("Let's deploy with only transaction data!");
	// const nonce = await wallet.getTransactionCount();
	// const tx = {
	// 	nonce: nonce,
	// 	gasPrice: 20000000000,
	// 	gasLimit: 1000000,
	// 	to: null,
	// 	value: 0,
	// 	data: "0x608060405234801561001057600080fd5b506107a9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80634f2be91f146100675780636057361d146100855780639e7a13ad146100a1578063b05784b8146100d2578063b2ac62ef146100f0578063bc832d4e14610120575b600080fd5b61006f61013c565b60405161007c9190610562565b60405180910390f35b61009f600480360381019061009a9190610449565b610145565b005b6100bb60048036038101906100b69190610449565b61014f565b6040516100c992919061057d565b60405180910390f35b6100da61020b565b6040516100e79190610562565b60405180910390f35b61010a60048036038101906101059190610400565b610214565b6040516101179190610562565b60405180910390f35b61013a60048036038101906101359190610476565b610242565b005b60006002905090565b8060008190555050565b6002818154811061015f57600080fd5b906000526020600020906002020160009150905080600001549080600101805461018890610676565b80601f01602080910402602001604051908101604052809291908181526020018280546101b490610676565b80156102015780601f106101d657610100808354040283529160200191610201565b820191906000526020600020905b8154815290600101906020018083116101e457829003601f168201915b5050505050905082565b60008054905090565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000604051806040016040528084815260200183815250905060028190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906102ad9291906102d8565b505050826001836040516102c1919061054b565b908152602001604051809103902081905550505050565b8280546102e490610676565b90600052602060002090601f016020900481019282610306576000855561034d565b82601f1061031f57805160ff191683800117855561034d565b8280016001018555821561034d579182015b8281111561034c578251825591602001919060010190610331565b5b50905061035a919061035e565b5090565b5b8082111561037757600081600090555060010161035f565b5090565b600061038e610389846105d2565b6105ad565b9050828152602081018484840111156103aa576103a961073c565b5b6103b5848285610634565b509392505050565b600082601f8301126103d2576103d1610737565b5b81356103e284826020860161037b565b91505092915050565b6000813590506103fa8161075c565b92915050565b60006020828403121561041657610415610746565b5b600082013567ffffffffffffffff81111561043457610433610741565b5b610440848285016103bd565b91505092915050565b60006020828403121561045f5761045e610746565b5b600061046d848285016103eb565b91505092915050565b6000806040838503121561048d5761048c610746565b5b600061049b858286016103eb565b925050602083013567ffffffffffffffff8111156104bc576104bb610741565b5b6104c8858286016103bd565b9150509250929050565b60006104dd82610603565b6104e7818561060e565b93506104f7818560208601610643565b6105008161074b565b840191505092915050565b600061051682610603565b610520818561061f565b9350610530818560208601610643565b80840191505092915050565b6105458161062a565b82525050565b6000610557828461050b565b915081905092915050565b6000602082019050610577600083018461053c565b92915050565b6000604082019050610592600083018561053c565b81810360208301526105a481846104d2565b90509392505050565b60006105b76105c8565b90506105c382826106a8565b919050565b6000604051905090565b600067ffffffffffffffff8211156105ed576105ec610708565b5b6105f68261074b565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610661578082015181840152602081019050610646565b83811115610670576000848401525b50505050565b6000600282049050600182168061068e57607f821691505b602082108114156106a2576106a16106d9565b5b50919050565b6106b18261074b565b810181811067ffffffffffffffff821117156106d0576106cf610708565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107658161062a565b811461077057600080fd5b5056fea2646970667358221220276e559f2f23d0414e19c6d125a0b7642803d41f35e31851f37efbc5e92633d364736f6c63430008070033",
	// 	chainId: 1337,
	// }

	// const sendTxResponse = await wallet.sendTransaction(tx);
	// await sendTxResponse.wait(1);
	// console.log(sendTxResponse);

	//call retrieve function
	const currentFavouriteNumber = await contract.retreive();
	console.log(`Current favourite number is zero: ${currentFavouriteNumber.toString()}`);

	//call store function
	const transactionResponse = await contract.store("99");
	const transactionsReceipt = await transactionResponse.wait(1)
	const updatedCurrentFavouriteNumber = await contract.retreive();
	console.log(`Updated Current favourite number is zero: ${updatedCurrentFavouriteNumber.toString()}`);


}

main()
	.then(() => process.exit(0))
	.catch((err) => {
		console.error(err);
		process.exit(1);
	});
